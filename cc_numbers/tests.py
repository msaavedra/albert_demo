
import os

from django.test import Client, TestCase
from django.urls import reverse

from .lib import const


class ValidationTestCase(TestCase):
    
    client = Client()
    
    @staticmethod
    def _build_url(card_number):
        return reverse('validation', args=[card_number])
    
    def test_validating_correct_numbers(self):
        """Test against valid numbers generated by a third party.
        """
        correct_numbers = (
            ('4653730707912599544', 'visa'),
            ('6011530317974277', 'discover'),
            ('5262338755421142', 'mastercard'),
            ('2221004436739198', 'mastercard'),
            ('371270301227138', 'amex'),
            ('3533468029475554', 'jcb'),
            ('36258492601291', 'diners'),
        )
        for num, network in correct_numbers:
            url = self._build_url(num)
            response = self.client.get(url)
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertEqual(data['is_valid'], True)
            self.assertEqual(data['network'], network)
    
    def test_other_returned_fields(self):
        """Make sure the various number properties are correctly deduced.
        """
        url = self._build_url('4653730707912599544')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertEqual(data['major_industry_identifier'], '4')
        self.assertEqual(data['issuer_identification_number'], '465373')
        self.assertEqual(data['personal_account_number'], '070791259954')
        self.assertEqual(data['check_digit'], '4')
        
    
    def test_hyphens(self):
        """Test that hyphens are allowed and work properly.
        """
        url = self._build_url('3709-8183-8381-52378')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json()['is_valid'], True)

    def test_spaces(self):
        """Test that hyphens are allowed and work properly.
        """
        url = self._build_url('3709 8183 8381 52378')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json()['is_valid'], True)

    def test_validating_incorrect_number(self):
        """Test that inconsistent number/check digit combos report as invalid.
        """
        url = self._build_url('37098183838152379')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json()['is_valid'], False)
    
    def test_leading_zero(self):
        """It's theoretically possible for a card to have a leading zero.
        
        There are no known cards that actually do, but it shouldn't cause
        the service to fail.
        """
        url = self._build_url('07840223393390')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertEqual(data['is_valid'], True)
        self.assertEqual(data['network'], 'unknown')
    
    def test_long_number(self):
        """Credit card numbers are a max of 19, per the spec.
        """
        url = self._build_url('98183838152379249285')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 400)
    
    def test_short_number(self):
        """There are no known issuers that use less than 12 digits.
        """
        url = self._build_url('4768')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 400)
    
    def test_non_numeric(self):
        """Characters other than numbers, spaces and hyphens are not allowed.
        """
        url = self._build_url('24782374823948CDEF')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 400)


class RandomCardNumberTestCase(TestCase):
    
    client = Client()
    base_url = reverse('random')
    
    def test_random_number_validity(self):
        """Make sure our random numbers are valid."""
        for _ in range(100):
            response = self.client.get(self.base_url)
            self.assertEqual(response.status_code, 200)
            validation_url = response.json()['validation_link']
            validation_response = self.client.get(validation_url)
            self.assertEqual(validation_response.status_code, 200)
            self.assertEqual(validation_response.json()['is_valid'], True)
    
    def test_valid_networks(self):
        """Make sure the network in the random number matches the request.
        """
        for network in const.NETWORK_NAME_TO_ENUM:
            url = self.base_url + '?network=' + network
            response = self.client.get(url)
            self.assertEqual(response.status_code, 200)
            validation_url = response.json()['validation_link']
            validation_response = self.client.get(validation_url)
            self.assertEqual(validation_response.status_code, 200)
            data = validation_response.json()
            self.assertEqual(data['is_valid'], True)
            self.assertEqual(data['network'], network)
    
    def test_invalid_network(self):
        """Make sure we fail gracefully on an invalid requested network."""
        url = self.base_url + '?network=invalid'
        response = self.client.get(url)
        self.assertEqual(response.status_code, 400)
